{"version":3,"sources":["store/actions.js","components/Button.jsx","components/TodoPoint.jsx","components/Editor.jsx","components/TodoList.jsx","containers/TodoListContainer.js","App.js","serviceWorker.js","store/reducer.js","index.js"],"names":["ADD_TODO","DELETE_TODO","SAVE_TODO","TOGGLE_EDIT","TOGGLE_COMPLETE","TOGGLE_DETAILS","Button","onClick","e","preventDefault","_this","props","name","this","react_default","a","createElement","className","Component","TodoPoint","_this$props","data","onCheckBoxClick","onDetailsButtonClick","onEditButtonClick","onDeleteButtonClick","summary","details","completed","detailed","type","checked","onChange","Button_Button","Editor","onSaveButtonClick","onCancelButtonClick","placeholder","defaultValue","ref","node","rows","value","TodoList","onCanlcelButtonClick","id","onDeleteTodo","onToggleEdit","_this2","todoIdList","todos","onSaveTodo","onToggleComplete","onToggleDetails","renderedList","length","map","item","edited","Editor_Editor","key","TodoPoint_TodoPoint","Fragment","onAddTodo","renderList","TodoListContainer","connect","state","dispatch","deleteTodo","saveTodo","toggleEdit","toggleComplete","toggleDetails","App","Boolean","window","location","hostname","match","arguments","undefined","action","concat","Object","toConsumableArray","filter","todo","detailedView","objectSpread","defineProperty","newState","store","createStore","idList","Math","max","apply","initialState","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fbc1416e.chunk.js","sourcesContent":["export const ADD_TODO = 'ADD_TODO';\r\nexport const DELETE_TODO = 'DELETE_TODO';\r\nexport const SAVE_TODO = 'SAVE_TODO';\r\nexport const TOGGLE_EDIT = 'TOGGLE_EDIT';\r\nexport const TOGGLE_COMPLETE = 'TOGGLE_COMPLETE';\r\nexport const TOGGLE_DETAILS = 'TOGGLE_DETAILS';\r\n\r\nexport function addTodo() {\r\n  return {\r\n    type: ADD_TODO,\r\n  }\r\n}\r\n\r\nexport function deleteTodo(id) {\r\n  return {\r\n    type: DELETE_TODO,\r\n    id,\r\n  }\r\n}\r\n\r\nexport function saveTodo(id, summary, details) {\r\n  return {\r\n    type: SAVE_TODO,\r\n    id,\r\n    summary, \r\n    details,\r\n  }\r\n}\r\n\r\nexport function toggleEdit(id) {\r\n  return {\r\n    type: TOGGLE_EDIT,\r\n    id,\r\n  }\r\n}\r\n\r\nexport function toggleComplete(id) {\r\n  return {\r\n    type: TOGGLE_COMPLETE,\r\n    id,\r\n  }\r\n}\r\n\r\nexport function toggleDetails(id) {\r\n  return {\r\n    type: TOGGLE_DETAILS,\r\n    id,\r\n  }\r\n}","import React, { Component } from 'react';\n\n\nclass Button extends Component {\n  onClick = (e) => {\n    e.preventDefault();\n    this.props.onClick();\n  };\n  render() {\n    const {name} = this.props;\n    return <button className={\"btn\" + name} onClick={this.onClick} > {name} </button>;\n  }\n}\n\nexport {Button};","import React, { Component } from 'react';\nimport {Button} from './Button';\n\nclass TodoPoint extends Component {\n  render() {\n    const {data, onCheckBoxClick, onDetailsButtonClick, onEditButtonClick, onDeleteButtonClick} = this.props;\n    const {summary, details, completed, detailed} = data;\n    return (\n      <div className={completed ? \"todoPoint completed\" : \"todoPoint\" }>\n        <div className=\"summary\" >\n          <input type=\"checkbox\" checked={completed} onChange={onCheckBoxClick} /> \n          {summary} \n        </div>\n        {detailed && <div className=\"details\"> {details} </div>}\n        <Button name=\"Details\" onClick={onDetailsButtonClick}/>\n        <Button name=\"Edit\" onClick={onEditButtonClick} />\n        <Button name=\"Delete\" onClick={onDeleteButtonClick}/>\n      </div>\n    );\n  }\n}\n\nexport {TodoPoint};\n","import React, { Component } from 'react';\nimport {Button} from './Button';\n\n\nclass Editor extends Component {\n  render() {    \n    const {data, onSaveButtonClick, onCancelButtonClick} = this.props;\n    let {summary, details} = data;\n    return (\n      <form className=\"editor\">\n          <input \n            type=\"text\" \n            className=\"summary\" \n            placeholder=\"Что нужно сделать?\"\n            defaultValue={summary}\n            ref={node => {summary = node}}\n          /> \n          <textarea rows=\"3\" className=\"details\" placeholder=\"Детали\"\n            defaultValue={details}\n            ref={node => {details = node}}\n          />\n          <Button name=\"Save\" onClick={() => onSaveButtonClick(summary.value, details.value)} />\n          <Button name=\"Cancel\" onClick={onCancelButtonClick} />\n      </form>\n    );\n  }\n}\n\nexport {Editor};\n","import React, { Component } from 'react';\nimport {Button} from './Button';\nimport {TodoPoint} from './TodoPoint';\nimport {Editor} from './Editor';\n\nclass TodoList extends Component {  \n  onCanlcelButtonClick = (id, summary, onDeleteTodo, onToggleEdit) => {\n    if (summary === '') {\n      return () => onDeleteTodo(id);\n    }\n    return () => onToggleEdit(id);\n  };\n  renderList() {\n    const {todoIdList, todos, onDeleteTodo, onSaveTodo, onToggleEdit, onToggleComplete, onToggleDetails} = this.props;\n    let renderedList = [];\n    if (todoIdList.length) {\n      renderedList = todoIdList.map(item => {\n        const data = todos[item]\n        const {id, edited, summary} = data;\n        if (edited) {\n          return (\n            <Editor \n              key={id} \n              data={data} \n              onSaveButtonClick={(summary, details) => onSaveTodo(id, summary, details)}\n              onCancelButtonClick={this.onCanlcelButtonClick(id, summary, onDeleteTodo, onToggleEdit)} \n            />\n          );\n        }\n        else {\n          return (\n            <TodoPoint \n              key={id} \n              data={data} \n              onCheckBoxClick={() => onToggleComplete(id)}\n              onDetailsButtonClick={() => onToggleDetails(id)}\n              onEditButtonClick={() => onToggleEdit(id)}\n              onDeleteButtonClick={() => onDeleteTodo(id)}\n            />\n          );\n        }\n      }\n    )}\n    return renderedList;\n  }\n\n  render() {\n    return (\n      <React.Fragment>  \n        <h1> TODO-list: </h1>\n        <Button name=\"Add\" onClick={this.props.onAddTodo} />\n        {this.renderList()}\n\n      </React.Fragment>\n    );\n  }\n}\n\nexport {TodoList};\n","import { connect } from 'react-redux';\r\nimport {addTodo, deleteTodo, saveTodo, toggleEdit, toggleComplete, toggleDetails} from '../store/actions';\r\nimport {TodoList} from '../components/TodoList';\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    todoIdList: state.todoIdList,\r\n    todos: state.todos,\r\n  }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onAddTodo: () => {\r\n      dispatch(addTodo())\r\n    },\r\n    onDeleteTodo: (id) => {\r\n      dispatch(deleteTodo(id))\r\n    },\r\n    onSaveTodo: (id, summary, details) => {\r\n      dispatch(saveTodo(id, summary, details))\r\n    },\r\n    onToggleEdit: (id) => {\r\n      dispatch(toggleEdit(id))\r\n    },\r\n    onToggleComplete: (id) => {\r\n      dispatch(toggleComplete(id))\r\n    },\r\n    onToggleDetails: (id) => {\r\n      dispatch(toggleDetails(id))\r\n    },\r\n  }\r\n};\r\n\r\nconst TodoListContainer = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(TodoList)\r\n\r\nexport {TodoListContainer};","import React, { Component } from 'react';\nimport {TodoListContainer} from './containers/TodoListContainer';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"app\">\n        <TodoListContainer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {ADD_TODO, DELETE_TODO, SAVE_TODO, TOGGLE_EDIT, TOGGLE_COMPLETE, TOGGLE_DETAILS} from './actions';\r\n\r\nconst todoIdList = (state = [], action) => {\r\n  switch (action.type) {\r\n      case ADD_TODO:\r\n        return [action.id, ...state];\r\n      case DELETE_TODO:\r\n        return state.filter(id => id !== action.id);\r\n      default:\r\n        return state;\r\n  }\r\n};\r\n\r\nconst todo = (state, action) => {\r\n  switch (action.type) {\r\n      case ADD_TODO:\r\n        return {\r\n          id: action.id,\r\n          completed: false,\r\n          edited: true,\r\n          detailedView: false,\r\n          summary: '',\r\n          details: '',\r\n        };\r\n      case SAVE_TODO:\r\n        if (action.summary) {\r\n          return {\r\n            ...state,\r\n            edited: false,\r\n            summary: action.summary,\r\n            details: action.details,\r\n          }; \r\n        }\r\n        return state;      \r\n      case TOGGLE_EDIT:\r\n        return {\r\n          ...state,\r\n          edited: !state.edited,\r\n        };      \r\n      case TOGGLE_COMPLETE:\r\n        return {\r\n          ...state,\r\n          completed: !state.completed,\r\n        };      \r\n      case TOGGLE_DETAILS:\r\n        return {\r\n          ...state,\r\n          detailed: !state.detailed,\r\n        };\r\n      default:\r\n        return state;\r\n  }\r\n};\r\n\r\nconst todos = (state = {}, action) => {\r\n  switch (action.type) {\r\n      case ADD_TODO:\r\n        return {\r\n            [action.id]: todo(state, action),\r\n            ...state,\r\n        };\r\n      case DELETE_TODO:\r\n        let newState = {...state};\r\n        delete newState[action.id];\r\n        return newState;\r\n      case SAVE_TODO:\r\n      case TOGGLE_EDIT:   \r\n      case TOGGLE_COMPLETE:\r\n      case TOGGLE_DETAILS:\r\n        newState = {...state};\r\n        newState[action.id] = todo(state[action.id], action);\r\n        return newState;\r\n      default:\r\n        return state;\r\n  }\r\n};\r\n\r\nconst reducer = (state = {}, action) => {\r\n  switch (action.type) {\r\n      case ADD_TODO:\r\n        const {todoIdList: idList} = state;\r\n        if (!idList || !idList.length) {\r\n          action.id = 1;\r\n        } else {\r\n          action.id = Math.max(...idList) + 1;\r\n        }\r\n        return {\r\n          todoIdList: todoIdList(state.todoIdList, action),\r\n          todos: todos(state.todos, action),\r\n        };\r\n      case DELETE_TODO:\r\n      case SAVE_TODO:    \r\n      case TOGGLE_EDIT:\r\n      case TOGGLE_COMPLETE:\r\n      case TOGGLE_DETAILS:\r\n        return {\r\n          todoIdList: todoIdList(state.todoIdList, action),\r\n          todos: todos(state.todos, action),\r\n        };\r\n      default:\r\n        return state;\r\n  }\r\n};\r\n\r\nexport {reducer};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {createStore} from 'redux';\nimport {Provider} from 'react-redux';\nimport {reducer} from './store/reducer';\nimport initialState from './data/todoList';\n\nconst store = createStore(reducer, initialState);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>, \n  document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}